# frozen_string_literal: true

require 'rails_helper'
require 'mno_enterprise/testing_support/be_same_files_as'

module MnoEnterprise
  describe Jpi::V1::Admin::ThemeController, type: :controller do
    include MnoEnterprise::TestingSupport::SharedExamples::JpiV1Admin
    routes { MnoEnterprise::Engine.routes }

    # Stub Authentication
    let(:user) { build(:user, :admin) }
    before do
      stub_user(user)
      sign_in user
    end

    # Stub Rake tasks
    # We have to manually redefine all used tasks
    let(:rake) { Rake::Application.new }
    before do
      Rake.application = rake
      Rake::Task.define_task(:environment)
    end

    # Stub FS
    let(:stylesheet_path) { Rails.root.join('frontend', 'src','app','stylesheets') }
    let(:tmp_stylesheet) { stylesheet_path.join('theme-previewer-tmp.less') }
    let(:published_stylesheet) { stylesheet_path.join('theme-previewer-published.less') }
    let(:stylesheets) { [tmp_stylesheet, published_stylesheet] }

    def stub_stylesheets
      FileUtils.mkdir_p(stylesheet_path)
    end

    describe 'POST #save', fakefs: true do
      let(:theme) do
        {
          branding: {
            '@bg-inverse-color' => '#ffffff'
          },
          variables: {
            'Fonts & Text' => {
              '@font-family-sans-serif' => 'Lato-Light'
            }
          }
        }
      end
      let(:expected_style) do
        <<~STYLE
          // Generated by the Express Theme Previewer

          //----------------------------------------
          // General Branding
          //----------------------------------------
          @bg-inverse-color: #ffffff;

          //----------------------------------------
          // Theme Variables
          //----------------------------------------
          // Fonts & Text
          @font-family-sans-serif: Lato-Light;

        STYLE
      end

      let(:params) { { theme: theme } }
      subject { post :save, params }

      before do
        # Define Rake tasks
        Rake::Task.define_task('mnoe:frontend:previewer:save')
        Rake::Task.define_task('mnoe:frontend:previewer:build')

        # Prepare FakeFS
        stub_stylesheets
      end

      it_behaves_like 'a jpi v1 admin action'

      context 'with bad parameters' do
        let(:params) { {} }

        # TODO: it is_expected.to have_http_status(:bad_request)?
        it { expect { subject }.to raise_error(ActionController::ParameterMissing) }
      end

      context 'when saving' do
        it 'saves the previewer style' do
          subject
          expect(File.read(tmp_stylesheet)).to eq(expected_style)
          expect(File).not_to exist(published_stylesheet)
        end

        it 'rebuild the theme previewer style' do
          expect(rake['mnoe:frontend:previewer:save']).to receive(:invoke)
          subject
        end

        it 'publish assets' do
          expect(SystemManager).to receive(:publish_assets)
          subject
        end
      end

      context 'when publishing' do
        let(:params) { { theme: theme, publish: true } }

        it 'apply the previewer style' do
          subject
          expect(File.read(published_stylesheet)).to eq(expected_style)
          expect(File).not_to exist(tmp_stylesheet)
        end

        it 'publish the theme previewer style' do
          expect(rake['mnoe:frontend:previewer:build']).to receive(:invoke)
          subject
        end

        it 'publish assets' do
          expect(SystemManager).to receive(:publish_assets)
          subject
        end
      end
    end

    describe 'POST #reset', fakefs: true do
      let(:params) { {} }
      subject { post :reset, params }

      before do
        # Rake tasks
        Rake::Task.define_task('mnoe:frontend:previewer:save')
        Rake::Task.define_task('mnoe:frontend:previewer:build')

        # Prepare FakeFS
        FileUtils.mkdir_p(stylesheet_path)
        stylesheets.each {|f| FileUtils.touch(f) }
      end

      it_behaves_like 'a jpi v1 admin action'

      context 'when resetting to default' do
        let(:params) { {default: true} }

        before do
          # FakeFS does not support truncate?
          allow(File).to receive(:truncate).with(published_stylesheet, 0)
        end

        it 'deletes all theme previewer stylesheets' do
          stylesheets.each do |s|
            expect(File).to exist(s)
          end

          # FakeFS does not support truncate?
          expect(File).to receive(:truncate).with(published_stylesheet, 0)

          subject

          expect(File).not_to exist(tmp_stylesheet)
        end

        it 'publish the theme previewer style' do
          expect(rake['mnoe:frontend:previewer:build']).to receive(:invoke)
          subject
        end

        it 'rebuild the theme previewer style' do
          expect(rake['mnoe:frontend:previewer:save']).to receive(:invoke)
          subject
        end

        it 'publish assets' do
          expect(SystemManager).to receive(:publish_assets)
          subject
        end
      end

      context 'when resetting to published' do
        it 'deletes the tmp stylesheet' do
          expect(File).to exist(tmp_stylesheet)
          subject
          expect(File).not_to exist(tmp_stylesheet)
        end

        it 'publish assets' do
          expect(SystemManager).to receive(:publish_assets)
          subject
        end

        it 'rebuild the theme previewer style' do
          expect(rake['mnoe:frontend:previewer:save']).to receive(:invoke)
          subject
        end
      end
    end

    # TODO: use fakefs -> This is causing issues with the File Upload
    describe 'PUT #logo' do
      let(:logo) { fixture_file_upload('files/main-logo.png', 'image/png', :binary) }
      let(:logo_file) { logo.path }

      before do
        Rake::Task.define_task('assets:precompile')
      end

      subject { put :logo, logo: logo }

      it_behaves_like 'a jpi v1 admin action'

      it { is_expected.to have_http_status(:created) }

      it 'update the logo files' do
        files = [
          'frontend/src/images/main-logo.png',
          'public/dashboard/images/main-logo.png',
          'public/admin/images/main-logo.png',
          'app/assets/images/mno_enterprise/main-logo.png'
        ]

        subject

        files.each do |f|
          expect(Rails.root.join(f)).to be_same_file_as(logo.path)
        end
      end

      it 'recompile assets' do
        expect(rake['assets:precompile']).to receive(:invoke)
        subject
      end

      it 'publish assets' do
        expect(SystemManager).to receive(:publish_assets)
        subject
      end

      it 'restart the app to refresh the assets manifest' do
        expect(SystemManager).to receive(:restart)
        subject
      end
    end
  end
end
